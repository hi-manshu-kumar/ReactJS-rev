1> setting styles dynamically

in if condition we just add the style that we want
    style.backgroundColor = 'red';
---------------------------------------------------------
2> setting classname dynamically

``in app.css
.red{
  color: red;
}

.bold{
  font-weight: bold;
}

``in app.js
let classes = []
if(this.state.persons.length <= 2){
  classes.push('red');  // classes = ['red']
}
if(this.state.persons.length <=1 ){
  classes.push('bold');
}

render(
    <p className= {classes.join(' ')}>this is really working</p> 
)

imppppppppppppppppppppppp
const array = [];
array.push('red');

array.push('blue');

array = ['red', 'blue'];

array.join(" ");        // arr = [red blue]
---------------------------------------------------------------
3> Using radium
npm i radium@0.19.4
radium is a popular library that can allow us to use media queries and pseudo selectors

1st import Radium from 'radium';
2nd export default Radium(App);             //it is a higher order component
3rd write code

const style = {
    ':hover' : {
        backgroundColor: 'lightred',
        color: 'black'
    }
}

style[':hover'] = {
    backgroundColor : 'salmon',
    color: 'black' 
}
--------------------------------------------------------------------------------
4> using radium for media queries

@media (min-width: 500px) {
    .Person{
        width: 450px;
    }
}

to use media queries we need to import StyleRoot component from radium
import Radium, {StyleRoot} from '../node_modules/radium';
 and also wrap our return div with 
 <StyleRoot> 
    <div></div>
 </StyleRoot>
--------------------------------------------------------------------------------
6> enabling and using css modules

go to package.json and run in terminal `npm run eject`  

in webpack.config.dev.js 
              modules: true,
              localIdentName: '[name]_[local]_[hash:base64:5]'

in app.js
import classes from './App.css';
className = {classes.App}

in app.css
.App button{
  background-color: green;
  color : white;
  font: inherit;
  border: 1px solid blue;
  padding: 8px;
  cursor: pointer;
  border-radius:4px
}

.App button:hover{
  background-color: lightgreen;
  color: black;
}

.App button.Red{
  background-color: red; 
}

.App button.Red:hover{
  background-color: salmon;
  color: black;
}
----------------------------------
working with pseudclasses
 
to have conditional styling we have to retun a string from btnclass ={classes.Red}

    let btnClass = '';
      btnClass = classes.Red;
            className = {btnClass}

.App button.Red{}     //.App button. will be neglected and only Red will be seen      
------------------
working with media queries

simply write your media queries no problem as we have an js object which stores css as a string and applies to 'person kjdhkasl'
by using these we have the option to allow css to work for particular elements

@media (min-width: 500px) {
    .Person{
        width: 450px;
    }
}
